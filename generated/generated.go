// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type ENUM_EVENTACTIVITY_TYPE string

const (
	ENUM_EVENTACTIVITY_TYPETalk     ENUM_EVENTACTIVITY_TYPE = "talk"
	ENUM_EVENTACTIVITY_TYPEWorkshop ENUM_EVENTACTIVITY_TYPE = "workshop"
	ENUM_EVENTACTIVITY_TYPEPanel    ENUM_EVENTACTIVITY_TYPE = "panel"
)

type ENUM_TEAMMEMBER_CATEGORY string

const (
	ENUM_TEAMMEMBER_CATEGORYTeam     ENUM_TEAMMEMBER_CATEGORY = "Team"
	ENUM_TEAMMEMBER_CATEGORYAdvisors ENUM_TEAMMEMBER_CATEGORY = "Advisors"
	ENUM_TEAMMEMBER_CATEGORYAngels   ENUM_TEAMMEMBER_CATEGORY = "Angels"
)

// EventsEventsEvent includes the requested fields of the GraphQL type Event.
type EventsEventsEvent struct {
	Data EventsEventsEventDataEvent `json:"data"`
}

// GetData returns EventsEventsEvent.Data, and is useful for accessing the field via an interface.
func (v *EventsEventsEvent) GetData() EventsEventsEventDataEvent { return v.Data }

// EventsEventsEventDataEvent includes the requested fields of the GraphQL type Event.
type EventsEventsEventDataEvent struct {
	Attributes EventsEventsEventDataEventAttributesEvent `json:"attributes"`
}

// GetAttributes returns EventsEventsEventDataEvent.Attributes, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEvent) GetAttributes() EventsEventsEventDataEventAttributesEvent {
	return v.Attributes
}

// EventsEventsEventDataEventAttributesEvent includes the requested fields of the GraphQL type Event.
type EventsEventsEventDataEventAttributesEvent struct {
	Name       string                                                             `json:"name"`
	Location   string                                                             `json:"location"`
	Start_date time.Time                                                          `json:"start_date"`
	Activities []EventsEventsEventDataEventAttributesEventActivitiesEventActivity `json:"activities"`
}

// GetName returns EventsEventsEventDataEventAttributesEvent.Name, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEvent) GetName() string { return v.Name }

// GetLocation returns EventsEventsEventDataEventAttributesEvent.Location, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEvent) GetLocation() string { return v.Location }

// GetStart_date returns EventsEventsEventDataEventAttributesEvent.Start_date, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEvent) GetStart_date() time.Time { return v.Start_date }

// GetActivities returns EventsEventsEventDataEventAttributesEvent.Activities, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEvent) GetActivities() []EventsEventsEventDataEventAttributesEventActivitiesEventActivity {
	return v.Activities
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivity includes the requested fields of the GraphQL type EventActivity.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivity struct {
	Data EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity `json:"data"`
}

// GetData returns EventsEventsEventDataEventAttributesEventActivitiesEventActivity.Data, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivity) GetData() EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity {
	return v.Data
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity includes the requested fields of the GraphQL type EventActivity.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity struct {
	Attributes EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity `json:"attributes"`
}

// GetAttributes returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity.Attributes, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivity) GetAttributes() EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity {
	return v.Attributes
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity includes the requested fields of the GraphQL type EventActivity.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity struct {
	Title             string                                                                                                                                  `json:"title"`
	Type              ENUM_EVENTACTIVITY_TYPE                                                                                                                 `json:"type"`
	Abstract          string                                                                                                                                  `json:"abstract"`
	Presentationtitle string                                                                                                                                  `json:"presentationtitle"`
	Materials         string                                                                                                                                  `json:"materials"`
	Start_date        time.Time                                                                                                                               `json:"start_date"`
	Recordings        []EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo `json:"recordings"`
	Speakers          []EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember            `json:"speakers"`
}

// GetTitle returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Title, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetTitle() string {
	return v.Title
}

// GetType returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Type, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetType() ENUM_EVENTACTIVITY_TYPE {
	return v.Type
}

// GetAbstract returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Abstract, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetAbstract() string {
	return v.Abstract
}

// GetPresentationtitle returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Presentationtitle, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetPresentationtitle() string {
	return v.Presentationtitle
}

// GetMaterials returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Materials, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetMaterials() string {
	return v.Materials
}

// GetStart_date returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Start_date, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetStart_date() time.Time {
	return v.Start_date
}

// GetRecordings returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Recordings, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetRecordings() []EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo {
	return v.Recordings
}

// GetSpeakers returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity.Speakers, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivity) GetSpeakers() []EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember {
	return v.Speakers
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo includes the requested fields of the GraphQL type ComponentBasicVideo.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

// GetName returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo.Name, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo) GetName() string {
	return v.Name
}

// GetUrl returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo.Url, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivityRecordingsComponentBasicVideo) GetUrl() string {
	return v.Url
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember includes the requested fields of the GraphQL type TeamMember.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember struct {
	Data EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember `json:"data"`
}

// GetData returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember.Data, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMember) GetData() EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember {
	return v.Data
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember includes the requested fields of the GraphQL type TeamMember.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember struct {
	Attributes EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember `json:"attributes"`
}

// GetAttributes returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember.Attributes, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMember) GetAttributes() EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember {
	return v.Attributes
}

// EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember includes the requested fields of the GraphQL type TeamMember.
type EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// GetName returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember.Name, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember) GetName() string {
	return v.Name
}

// GetTitle returns EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember.Title, and is useful for accessing the field via an interface.
func (v *EventsEventsEventDataEventAttributesEventActivitiesEventActivityDataEventActivityAttributesEventActivitySpeakersTeamMemberDataTeamMemberAttributesTeamMember) GetTitle() string {
	return v.Title
}

// EventsResponse is returned by Events on success.
type EventsResponse struct {
	Events []EventsEventsEvent `json:"events"`
}

// GetEvents returns EventsResponse.Events, and is useful for accessing the field via an interface.
func (v *EventsResponse) GetEvents() []EventsEventsEvent { return v.Events }

// PapersPapersPaper includes the requested fields of the GraphQL type Paper.
type PapersPapersPaper struct {
	Title          string   `json:"title"`
	Authors        []string `json:"authors"`
	Abstract       string   `json:"abstract"`
	AttachmentLink string   `json:"attachmentLink"`
	IssueDate      string   `json:"issueDate"`
	Source         string   `json:"source"`
	SourceLink     string   `json:"sourceLink"`
}

// GetTitle returns PapersPapersPaper.Title, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetTitle() string { return v.Title }

// GetAuthors returns PapersPapersPaper.Authors, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetAuthors() []string { return v.Authors }

// GetAbstract returns PapersPapersPaper.Abstract, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetAbstract() string { return v.Abstract }

// GetAttachmentLink returns PapersPapersPaper.AttachmentLink, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetAttachmentLink() string { return v.AttachmentLink }

// GetIssueDate returns PapersPapersPaper.IssueDate, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetIssueDate() string { return v.IssueDate }

// GetSource returns PapersPapersPaper.Source, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetSource() string { return v.Source }

// GetSourceLink returns PapersPapersPaper.SourceLink, and is useful for accessing the field via an interface.
func (v *PapersPapersPaper) GetSourceLink() string { return v.SourceLink }

// PapersResponse is returned by Papers on success.
type PapersResponse struct {
	Papers []PapersPapersPaper `json:"papers"`
}

// GetPapers returns PapersResponse.Papers, and is useful for accessing the field via an interface.
func (v *PapersResponse) GetPapers() []PapersPapersPaper { return v.Papers }

// TeamMembersResponse is returned by TeamMembers on success.
type TeamMembersResponse struct {
	TeamMembers []TeamMembersTeamMembersTeamMember `json:"teamMembers"`
}

// GetTeamMembers returns TeamMembersResponse.TeamMembers, and is useful for accessing the field via an interface.
func (v *TeamMembersResponse) GetTeamMembers() []TeamMembersTeamMembersTeamMember {
	return v.TeamMembers
}

// TeamMembersTeamMembersTeamMember includes the requested fields of the GraphQL type TeamMember.
type TeamMembersTeamMembersTeamMember struct {
	Data TeamMembersTeamMembersTeamMemberDataTeamMember `json:"data"`
}

// GetData returns TeamMembersTeamMembersTeamMember.Data, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMember) GetData() TeamMembersTeamMembersTeamMemberDataTeamMember {
	return v.Data
}

// TeamMembersTeamMembersTeamMemberDataTeamMember includes the requested fields of the GraphQL type TeamMember.
type TeamMembersTeamMembersTeamMemberDataTeamMember struct {
	Id         string                                                             `json:"id"`
	Attributes TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember `json:"attributes"`
}

// GetId returns TeamMembersTeamMembersTeamMemberDataTeamMember.Id, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMember) GetId() string { return v.Id }

// GetAttributes returns TeamMembersTeamMembersTeamMemberDataTeamMember.Attributes, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMember) GetAttributes() TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember {
	return v.Attributes
}

// TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember includes the requested fields of the GraphQL type TeamMember.
type TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember struct {
	Name     string                   `json:"name"`
	Title    string                   `json:"title"`
	Bio      string                   `json:"bio"`
	Category ENUM_TEAMMEMBER_CATEGORY `json:"category"`
}

// GetName returns TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember.Name, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember) GetName() string {
	return v.Name
}

// GetTitle returns TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember.Title, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember) GetTitle() string {
	return v.Title
}

// GetBio returns TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember.Bio, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember) GetBio() string {
	return v.Bio
}

// GetCategory returns TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember.Category, and is useful for accessing the field via an interface.
func (v *TeamMembersTeamMembersTeamMemberDataTeamMemberAttributesTeamMember) GetCategory() ENUM_TEAMMEMBER_CATEGORY {
	return v.Category
}

// The query or mutation executed by Events.
const Events_Operation = `
query Events {
	events(pagination: {pageSize:1000}) {
		data {
			attributes {
				name
				location
				start_date
				activities {
					data {
						attributes {
							title
							type
							abstract
							presentationtitle
							materials
							start_date
							recordings {
								name
								url
							}
							speakers {
								data {
									attributes {
										name
										title
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func Events(
	ctx_ context.Context,
	client_ graphql.Client,
) (*EventsResponse, error) {
	req_ := &graphql.Request{
		OpName: "Events",
		Query:  Events_Operation,
	}
	var err_ error

	var data_ EventsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Papers.
const Papers_Operation = `
query Papers {
	papers(pagination: {pageSize:1000}) {
		title
		authors
		abstract
		attachmentLink
		issueDate
		source
		sourceLink
	}
}
`

func Papers(
	ctx_ context.Context,
	client_ graphql.Client,
) (*PapersResponse, error) {
	req_ := &graphql.Request{
		OpName: "Papers",
		Query:  Papers_Operation,
	}
	var err_ error

	var data_ PapersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by TeamMembers.
const TeamMembers_Operation = `
query TeamMembers {
	teamMembers(filters: {category:{eq:"Team"}}, pagination: {pageSize:100}) {
		data {
			id
			attributes {
				name
				title
				bio
				category
			}
		}
	}
}
`

func TeamMembers(
	ctx_ context.Context,
	client_ graphql.Client,
) (*TeamMembersResponse, error) {
	req_ := &graphql.Request{
		OpName: "TeamMembers",
		Query:  TeamMembers_Operation,
	}
	var err_ error

	var data_ TeamMembersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
